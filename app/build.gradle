plugins {
    id 'com.android.application'
    alias(libs.plugins.compose.compiler)
}

android {
    namespace 'com.manager.ssb'
    compileSdk 34
    ndkVersion = "28.2.13676358"
    
    buildFeatures {
        buildConfig true
    }
    
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    
    signingConfigs {
        release {
            storeFile null
            keyAlias null
        }
        
        debug {
            storeFile null
            keyAlias null
        }
    }
    
    // 从外部文件加载签名配置（如果存在）
    def keystorePropertiesFile = rootProject.file('keystore.properties')
    if (keystorePropertiesFile.exists()) {
        def keystoreProperties = new Properties()
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
        
        signingConfigs.release.storeFile = file(keystoreProperties['storeFile'])
        signingConfigs.release.storePassword = keystoreProperties['storePassword']
        signingConfigs.release.keyAlias = keystoreProperties['keyAlias']
        signingConfigs.release.keyPassword = keystoreProperties['keyPassword']
        
        signingConfigs.debug.storeFile = file(keystoreProperties['storeFile'])
        signingConfigs.debug.storePassword = keystoreProperties['storePassword']
        signingConfigs.debug.keyAlias = keystoreProperties['keyAlias']
        signingConfigs.debug.keyPassword = keystoreProperties['keyPassword']
    }

    defaultConfig {
        applicationId "com.manager.ssb"
        minSdk 21
        targetSdk 28
        versionCode 2
        versionName "1.0.1"
        
        multiDexEnabled true
        
        vectorDrawables { 
            useSupportLibrary true
        }
        
        externalNativeBuild {
            ndkBuild {
                cFlags "-std=c11", "-Os", "-fno-stack-protector", "-Wl,--gc-sections"
            }
        }

        ndk {
            abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
        }
        
        def getGitInfo = { commandParts ->
            def proc = commandParts.execute([], project.rootDir)
            def output = new ByteArrayOutputStream()
            def error = new ByteArrayOutputStream()
            proc.waitForProcessOutput(output, error)
            if (proc.exitValue() != 0) {
                logger.error("Git command failed: ${commandParts.join(' ')}\nError: ${error.toString()}")
                return "unknown"
            }
            return output.toString().trim()
        }

        def gitBranchName = getGitInfo(['git', 'rev-parse', '--abbrev-ref', 'HEAD'])
        def gitCommitShortHash = getGitInfo(['git', 'rev-parse', '--short', 'HEAD'])
        def gitCommitAuthor = getGitInfo(['git', 'log', '-1', '--pretty=format:%an'])
        def gitCommitTime = getGitInfo(['git', 'log', '-1', '--pretty=format:%ct'])

        buildConfigField "String", "GIT_BRANCH_NAME", "\"${gitBranchName}\""
        buildConfigField "String", "GIT_COMMIT_SHORT_HASH", "\"${gitCommitShortHash}\""
        buildConfigField "String", "GIT_COMMIT_AUTHOR", "\"${gitCommitAuthor}\""
        buildConfigField "String", "GIT_COMMIT_TIME", "\"${gitCommitTime}\""
        
        buildConfigField "String", "SIGNATURE_MD5", "\"a69c66db66302c7b55ca797f7da81404\""
        
        buildConfigField "String", "BUILD_TIME", "\"${System.currentTimeMillis()}\""
        buildConfigField("String", "APPLICATION_ID_SUFFIX", "\"\"")
    }

    buildTypes {
        debug {
            def getGitInfo = { commandParts ->
                def proc = commandParts.execute([], project.rootDir)
                def output = new ByteArrayOutputStream()
                def error = new ByteArrayOutputStream()
                proc.waitForProcessOutput(output, error)
                if (proc.exitValue() != 0) {
                    logger.error("Git command failed: ${commandParts.join(' ')}\nError: ${error.toString()}")
                    return "unknown"
                }
                return output.toString().trim()
            }
            
            def gitCommitShortHash = getGitInfo(['git', 'rev-parse', '--short', 'HEAD'])
            
            // 动态生成版本名称，追加 Build 号
            def buildNumberFile = file("${project.rootDir}/buildNumber.txt")
            def buildNumber = 0 // 默认构建号

            // 如果 buildNumber 文件存在，读取其中的值
            if (buildNumberFile.exists()) {
                buildNumber = Integer.parseInt(buildNumberFile.text.trim())
            } else {
                // 如果文件不存在，初始化为0
                buildNumberFile.text = "0"
            }
            

            // 组合版本后缀
            versionNameSuffix "-build${buildNumber + 1}.${gitCommitShortHash}"

            // 在构建完成后递增 buildNumber 并写入文件
            tasks.whenTaskAdded { task ->
                if (task.name == 'assembleDebug') {
                    task.doLast {
                        // 更新 buildNumber 文件
                        buildNumber = buildNumber + 1
                        buildNumberFile.text = buildNumber.toString()
                    }
                }
            }
            
            signingConfig signingConfigs.debug
        }
        
        release {
            def getGitInfo = { commandParts ->
                def proc = commandParts.execute([], project.rootDir)
                def output = new ByteArrayOutputStream()
                def error = new ByteArrayOutputStream()
                proc.waitForProcessOutput(output, error)
                if (proc.exitValue() != 0) {
                    logger.error("Git command failed: ${commandParts.join(' ')}\nError: ${error.toString()}")
                    return "unknown"
                }
                return output.toString().trim()
            }
            
            def gitCommitShortHash = getGitInfo(['git', 'rev-parse', '--short', 'HEAD'])
            
            // 动态生成版本名称，追加 Build 号
            def buildNumberFile = file("${project.rootDir}/buildNumber.txt")
            def buildNumber = 0 // 默认构建号

            // 如果 buildNumber 文件存在，读取其中的值
            if (buildNumberFile.exists()) {
                buildNumber = Integer.parseInt(buildNumberFile.text.trim())
            } else {
                // 如果文件不存在，初始化为0
                buildNumberFile.text = "0"
            }
            
            def releaseNumberFile = file("${project.rootDir}/releaseNumber.txt")
            def releaseNumber = 0 // 默认构建号

            // 如果 buildNumber 文件存在，读取其中的值
            if (releaseNumberFile.exists()) {
                releaseNumber = Integer.parseInt(releaseNumberFile.text.trim())
            } else {
                // 如果文件不存在，初始化为0
                releaseNumberFile.text = "0"
            }
            
            versionNameSuffix "-release${releaseNumber + 1}-build${buildNumber + 1}.${gitCommitShortHash}"
            
            // 在构建完成后递增 buildNumber 并写入文件
            tasks.whenTaskAdded { task ->
                if (task.name == 'assembleRelease') {
                    task.doLast {
                        // 更新 buildNumber 文件
                        buildNumber = buildNumber + 1
                        buildNumberFile.text = buildNumber.toString()
                        
                        // 更新 releaseNumber 文件
                        releaseNumber = releaseNumber + 1
                        releaseNumberFile.text = releaseNumber.toString()
                    }
                }
            }
            
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            
            // 配置签名
            signingConfig signingConfigs.release
        }
    }
    

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    buildFeatures {
        viewBinding true
        compose true
    }
    
    externalNativeBuild {
        ndkBuild {
            path "src/main/jni/Android.mk"
        }
    }
    
    packagingOptions {
        jniLibs {
            useLegacyPackaging true
        }
    }
}

dependencies {
    implementation 'androidx.activity:activity:1.6.1'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation libs.preference
    implementation libs.annotation
    
    implementation("com.google.android.material:material:1.9.0")
    implementation("com.google.code.gson:gson:2.8.8")
    implementation("androidx.constraintlayout:constraintlayout:2.1.4")
    implementation 'androidx.webkit:webkit:1.7.0'
    
    api project(":terminal-view")
}